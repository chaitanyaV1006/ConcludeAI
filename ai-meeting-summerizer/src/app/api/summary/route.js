// summary/route.js
import { NextResponse } from "next/server";

export async function POST(req) {
  const { transcript } = await req.json();

  if (!transcript) {
    return NextResponse.json({ error: "Transcript missing" }, { status: 400 });
  }

  try {
    const geminiRes = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  // Enhanced prompt to explicitly ask for structured output
                  text: `You are a helpful meeting assistant. Summarize the following meeting transcript concisely and then list all action items clearly.
                  
                  Please format your response strictly as follows:

                  ---START_SUMMARY---
                  [Your concise summary here]
                  ---END_SUMMARY---

                  ---START_ACTION_ITEMS---
                  - [Action Item 1]
                  - [Action Item 2]
                  - [Action Item N]
                  ---END_ACTION_ITEMS---

                  Transcript:
                  ${transcript}`,
                },
              ],
            },
          ],
        }),
      }
    );

    const data = await geminiRes.json();

    if (!data.candidates || !data.candidates[0]?.content?.parts?.[0]?.text) {
      console.error("Invalid Gemini response:", JSON.stringify(data, null, 2));
      return NextResponse.json({ error: "No summary generated by Gemini." }, { status: 500 });
    }

    const text = data.candidates[0].content.parts[0].text;

    // Use the explicit delimiters for more robust parsing
    const summaryMatch = text.match(/---START_SUMMARY---([\s\S]*?)---END_SUMMARY---/i);
    const actionItemsMatch = text.match(/---START_ACTION_ITEMS---([\s\S]*?)---END_ACTION_ITEMS---/i);

    const summary = summaryMatch && summaryMatch[1] ? summaryMatch[1].trim() : "[No summary generated]";
    const actionItems = actionItemsMatch && actionItemsMatch[1]
      ? actionItemsMatch[1].trim().split(/\n-\s*/).filter((item) => item && !/^\s*$/.test(item)) // Split by newline and '- '
      : [];

    // Filter out any empty strings that might result from splitting
    const filteredActionItems = actionItems.filter(item => item.trim() !== "");

    return NextResponse.json({ summary, action_items: filteredActionItems });
  } catch (err) {
    console.error("Gemini API error:", err);
    return NextResponse.json({ error: "Failed to generate summary or action items." }, { status: 500 });
  }
}